<?php

class tcBillboardWarnFilesGetListProcessor extends modObjectGetListProcessor
{
    public $classKey = 'tcBillboardWarnFiles';
    public $defaultSortField = 'order_num';
    public $defaultSortDirection = 'DESC';
    /** @var  tcBillboard $tcBillboard */
    public $tcBillboard;
    public $permission = 'tborder_warning_list';


    /**
     * @return bool
     */
    public function initialize()
    {
        $this->tcBillboard = $this->modx->getService('tcBillboard');

        return parent::initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * We do a special check of permissions
     * because our objects is not an instances of modAccessibleObject
     *
     * @return boolean|string
     */
    public function beforeQuery()
    {
        if (!$this->checkPermissions()) {
            return $this->modx->lexicon('access_denied');
        }
        return true;
    }

    /**
     * @return array|string
     */
    public function process() {
        $beforeQuery = $this->beforeQuery();
        if ($beforeQuery !== true) {
            return $this->failure($beforeQuery);
        }
        $data = $this->getData();

        if ($this->getProperty('init') == 'export') {
            $list = $this->iterate($data);

            if (!$this->exportPdf($list, $this->getProperty('ids'))) {
                return $this->failure($this->modx->lexicon('tcbillboard_err_to_export_files'));
            }
        } else {
            $list = $this->iterate($data);
        }
        return $this->outputArray($list,$data['total']);
    }

    /**
     * Копирует выбранные файлы во временный каталог, пакует и отправляет в браузер
     * $ids - список id ордеров с выбранными файлами
     * @param $list
     * @param $ids
     * @return bool
     */
    public function exportPdf($list, $ids)
    {
        $ids = explode(',', $ids);
        $path = $this->tcBillboard->config['tmpPath'];

        if ($this->tcBillboard->mkdir($path, 0755)) { // Создать временную папку
            foreach ($list as $item) {
                if (in_array($item['id'], $ids) && !empty($item['file'])) {
                    $f = substr(strrchr($item['file'], '/'), 1);
                    // Копируем выбранные файлы во временную папку
                    copy(MODX_CORE_PATH . $item['file'], $path . $f);
                    unset($f);
                }
            }
            // Архивируем и отправляем на скачивание
            if ($zip = $this->tcBillboard->packZip('warning' . $this->rank)) {
                $file = substr(strrchr($zip, '/'), 1);

                header('Content-type: application/zip');
                header('Content-Disposition: attachment; filename="' . $file . '"');
                header("Pragma: no-cache");
                readfile($zip);
                //exit;
            }
            // Меняем статус на Скачено
            foreach ($ids as $id) {
                if ($res = $this->modx->getObject($this->classKey, (int)$id)) {
                    if (!empty($res->get('file'))) {
                        $res->set('downloaded', 1);
                        $res->save();
                    }
                }
            }
            // Удаляем временную папку со всем содержимым
            $this->tcBillboard->removeDir($path);
            return true;
        }
        return false;
    }

    /**
     * @param xPDOQuery $c
     *
     * @return xPDOQuery
     */
    public function prepareQueryBeforeCount(xPDOQuery $c)
    {
        if ($date_start = $this->getProperty('date_start')) {
            $c->andCondition(array(
                'createdon:>=' => date('Y-m-d 00:00:00', strtotime($date_start)),
            ), null, 1);
        }
        if ($date_end = $this->getProperty('date_end')) {
            $c->andCondition(array(
                'createdon:<=' => date('Y-m-d 23:59:59', strtotime($date_end)),
            ), null, 1);
        }
        return $c;
    }
}

return 'tcBillboardWarnFilesGetListProcessor';